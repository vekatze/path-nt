import {
  core.list {all, filter, length, reverse},
  core.text {
    drop-end-N,
    drop-while-end-N,
    intercalate,
    split,
    take-N,
    take-end-N,
    take-while-end-N,
  },
  core.text.eq {eq-suffix},
}

inline separator-rune: rune {
  `/`
}

inline separator: &text {
  introspect operating-system {
  | linux =>
    "/"
  | darwin =>
    "/"
  }
}

define is-absolute(path: &text): bool {
  pin head = take-N(path, 1);
  eq-text(head, separator)
}

define is-relative(path: &text): bool {
  not(is-absolute(path))
}

define _clean-double-dots(components: list(text), acc: list(text)): list(text) {
  match components {
  | Nil =>
    reverse(acc)
  | Cons(c, cs) =>
    let b on c = eq-text(c, "..");
    if b {
      match acc {
      | Nil =>
        _clean-double-dots(cs, Nil)
      | Cons(_, acc-rest) =>
        _clean-double-dots(cs, acc-rest)
      }
    } else {
      _clean-double-dots(cs, Cons(c, acc))
    }
  }
}

define clean(path: &text): text {
  let components = split(path, separator);
  let components' =
    filter(components, function (component) {
      all(List[
        not(eq-text(component, "")),
        not(eq-text(component, ".")),
      ])
    });
  let components' = _clean-double-dots(components', List[]);
  if is-absolute(path) {
    let len on components' = length(components');
    if eq-int(len, 0) {
      *separator
    } else {
      intercalate(Cons(*"", components'), *separator)
    }
  } else {
    intercalate(components', *separator)
  }
}

define append(path1: &text, path2: &text): text {
  if eq-text(path1, "") {
    *path2
  } else {
    pin tmp1 = core.text.append(path1, separator);
    pin tmp2 = core.text.append(tmp1, path2);
    clean(tmp2)
  }
}

define take-last(path: &text): text {
  // take-last("foo/") => ""
  // take-last("foo/bar") => "bar"
  // take-last("foobar") => "foobar"
  // take-last("root/foo/") => ""
  // take-last("root/foo/bar") => "bar"
  pin tmp =
    take-while-end-N(path, function (r) {
      ne-rune(r, separator-rune)
    });
  clean(tmp)
}

define drop-last(path: &text): text {
  // drop-last("foo/") => "foo"
  // drop-last("foo/bar") => "foo"
  // drop-last("foobar") => ""
  // drop-last("root/foo/") => "root/foo"
  // drop-last("root/foo/bar") => "root/foo"
  pin tmp =
    drop-while-end-N(path, function (r) {
      ne-rune(r, separator-rune)
    });
  clean(tmp)
}

define _split-extension(path: &text, pivot: int): pair(text, text) {
  pin file = drop-end-N(path, pivot);
  let ext = take-end-N(path, pivot);
  if or(eq-suffix(file, "."), eq-suffix(file, "/")) {
    Pair(clean(path), *"")
  } else {
    Pair(clean(file), ext)
  }
}

define split-extension(path: &text): pair(text, text) {
  let dot-pos-or-none =
    core.text.find-end(path, function (r) {
      eq-rune(r, `.`)
    });
  let slash-pos-or-none =
    core.text.find-end(path, function (r) {
      eq-rune(r, `/`)
    });
  match dot-pos-or-none {
  | Left(_) =>
    Pair(clean(path), *"")
  | Right(dot-pos) =>
    match slash-pos-or-none {
    | Left(_) =>
      _split-extension(path, add-int(dot-pos, 1))
    | Right(slash-pos) =>
      if lt-int(slash-pos, dot-pos) {
        Pair(clean(path), *"")
      } else {
        _split-extension(path, add-int(dot-pos, 1))
      }
    }
  }
}
