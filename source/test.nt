import {
  noa.check {check},
  noa.make-noa-kit {make-default-noa-kit},
  this.path {clean, drop-last, is-absolute, is-relative, split-extension, take-last},
  this.path.gen {paths},
}

define main(): unit {
  pin k = make-default-noa-kit();
  check(
    k,
    "∀ (p: path). clean(clean(p)) == clean(p)",
    paths,
    function (p) {
      pin p = p;
      pin p1 = clean(p);
      pin p2 = clean(p1);
      eq-text(p1, p2)
    },
  );
  check(
    k,
    "∀ (p: path). is-absolute(p) <=> not(is-relative(p))",
    paths,
    function (p) {
      pin p = p;
      if is-absolute(p) {
        not(is-relative(p))
      } else {
        is-relative(p)
      }
    },
  );
  check(
    k,
    "∀ (p: path). is-relative(p) <=> not(is-absolute(p))",
    paths,
    function (p) {
      pin p = p;
      if is-relative(p) {
        not(is-absolute(p))
      } else {
        is-absolute(p)
      }
    },
  );
  check(
    k,
    "∀ (p: path). is-absolute(p) <=> is-absolute(clean(p))",
    paths,
    function (p) {
      pin p = p;
      if is-absolute(p) {
        pin p' = clean(p);
        is-absolute(p')
      } else {
        pin p' = clean(p);
        not(is-absolute(p'))
      }
    },
  );
  check(
    k,
    "∀ (p: path). is-relative(p) <=> is-relative(clean(p))",
    paths,
    function (p) {
      pin p = p;
      if is-relative(p) {
        pin p' = clean(p);
        is-relative(p')
      } else {
        pin p' = clean(p);
        not(is-relative(p'))
      }
    },
  );
  check(
    k,
    "∀ (p: path). append(drop-last(p), take-last(p)) == clean(p)",
    paths,
    function (p) {
      pin p = p;
      pin dir = drop-last(p);
      pin base = take-last(p);
      pin p' = this.path.append(dir, base);
      pin p1 = clean(p);
      eq-text(p1, p')
    },
  );
  check(
    k,
    "∀ (p: path). let Pair(base, ext) = split-extension(p) in clean(text-append(base, ext)) == clean(p)",
    paths,
    function (p) {
      pin p = p;
      let Pair(init, last) = split-extension(p);
      pin init = init;
      pin last = last;
      pin p' = core.text.append(init, last);
      pin p1 = clean(p);
      pin p2 = clean(p');
      eq-text(p1, p2)
    },
  )
}
