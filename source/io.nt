import {
  core.c-string {c-string, from-c-string, to-c-string},
  core.control {discard},
  core.errno {get-error-message, report-system-error, system},
  core.magic,
  this.entity.dirent {Dirent, dirent},
  this.entity.dirent.show {show-dirent},
  this.entity.dtype {dtype-from-int},
  this.path {drop-last},
}

foreign {
  getcwd(pointer, int): pointer,
  opendir(pointer): pointer,
  readdir(pointer): pointer,
  closedir(pointer): int,
  neut_path_v0_1_GET_DNAME(pointer): pointer,
  neut_path_v0_1_GET_DTYPE(pointer): int,
}

data _directory {}

define get-current-directory(): system(text) {
  let zero: int = 0 in
  let result = magic external getcwd(zero, zero) in
  if eq-int(result, 0) {
    report-system-error()
  } else {
    Right(from-c-string(core.magic.cast(int, &c-string, result)))
  }
}

define _open-directory(p: &text): system(_directory) {
  let c-str = to-c-string(p) in
  let result on c-str = magic external opendir(c-str) in
  discard(c-str);
  if eq-int(result, 0) {
    report-system-error()
  } else {
    Right(core.magic.cast(int, _directory, result))
  }
}

define _read-directory(d: _directory): list(dirent) {
  let result = magic external readdir(d) in
  if eq-int(result, 0) {
    []
  } else {
    let name = from-c-string(magic external neut_path_v0_1_GET_DNAME(result)) in
    let kind = dtype-from-int(magic external neut_path_v0_1_GET_DTYPE(result)) in
    Cons(Dirent of {kind, name}, _read-directory(d))
  }
}

define _close-directory(d: _directory): system(unit) {
  let result = magic external closedir(d) in
  if eq-int(result, -1) {
    report-system-error()
  } else {
    Right(Unit)
  }
}

define read-directory(p: &text): system(list(dirent)) {
  try dir = _open-directory(p) in
  let output = _read-directory(dir) in
  try _ = _close-directory(dir) in
  Right(output)
}

define test-zen(): system(unit) {
  try out = read-directory("/Users/vekatze/Desktop") in
  for(out, function (item) {
    printf("{}\n", [show-dirent(item)])
  });
  try cwd = get-current-directory() in
  pin cwd = cwd in
  pin p2 = drop-last(cwd) in
  printf("→{}←\n", [*p2]);
  Right(Unit)
}

define zen(): unit {
  match test-zen() {
  | Left(e) =>
    printf("{}\n", [get-error-message(e)])
  | Right(_) =>
    print("ok\n")
  }
}
